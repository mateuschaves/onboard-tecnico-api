version: "3"

services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run dev
    volumes:
      - .:/usr/src/app
    networks:
      - webnet
    environment:
      PORT: ${PORT}
      DB_HOST: ${DB_HOST}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - '3000:${PORT}'
    links:
      - postgres
      - redis
    depends_on:
      - postgres
      - redis
  
  postgres:
    image: postgres:12.4-alpine
    ports:
      - '5432:5432'
    volumes:
      - postgres:/var/lib/postgresql/data
    container_name: postgres
    networks:
      - webnet
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DATABASE: ${DB_NAME}

  redis:
    image: redis
    container_name: redis
    ports:
     - '6379:6379'
    volumes:
     - $PWD/redis-data:/var/lib/redis
     - $PWD/redis.conf:/usr/local/etc/redis/redis.conf

    networks:
      - webnet
  sonarqube:
    image: sonarqube:8.2-community
    depends_on:
      - postgres
    ports:
      - "9000:9000"
    networks:
      - webnet
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
      SONAR_JDBC_USERNAME: ${DB_USERNAME}
      SONAR_JDBC_PASSWORD: ${DB_PASSWORD}
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp

volumes:
  postgres:
  redis:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
networks:
  webnet: